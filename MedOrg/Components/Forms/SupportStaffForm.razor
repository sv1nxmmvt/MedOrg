@using MedOrg.Data
@using MedOrg.Data.Models.Entities.Institutions
@using MedOrg.Data.Models.Entities.MedStaff
@using Microsoft.EntityFrameworkCore
@inject MedOrgDbContext DbContext

<EditForm Model="@Model" OnValidSubmit="@HandleSubmit">
    <DataAnnotationsValidator />

    <div class="row">
        <div class="col-md-4 mb-3">
            <label class="form-label">Фамилия *</label>
            <InputText class="form-control" @bind-Value="Model.LastName" />
            <ValidationMessage For="@(() => Model.LastName)" />
        </div>
        <div class="col-md-4 mb-3">
            <label class="form-label">Имя *</label>
            <InputText class="form-control" @bind-Value="Model.FirstName" />
            <ValidationMessage For="@(() => Model.FirstName)" />
        </div>
        <div class="col-md-4 mb-3">
            <label class="form-label">Отчество</label>
            <InputText class="form-control" @bind-Value="Model.MiddleName" />
        </div>
    </div>

    <div class="row">
        <div class="col-md-6 mb-3">
            <label class="form-label">Дата рождения *</label>
            <InputDate class="form-control" @bind-Value="Model.BirthDate" />
            <ValidationMessage For="@(() => Model.BirthDate)" />
        </div>
        <div class="col-md-6 mb-3">
            <label class="form-label">Дата приёма на работу *</label>
            <InputDate class="form-control" @bind-Value="Model.HireDate" />
            <ValidationMessage For="@(() => Model.HireDate)" />
        </div>
    </div>

    <div class="mb-3">
        <label class="form-label">Телефон</label>
        <InputText class="form-control" @bind-Value="Model.Phone" placeholder="+7 (XXX) XXX-XX-XX" />
    </div>

    <div class="mb-3">
        <label class="form-label">Должность *</label>
        <InputText class="form-control" @bind-Value="Model.Position" placeholder="Например: Медсестра" />
        <ValidationMessage For="@(() => Model.Position)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Базовая зарплата *</label>
        <InputNumber class="form-control" @bind-Value="Model.BaseSalary" />
        <ValidationMessage For="@(() => Model.BaseSalary)" />
    </div>

    <div class="mb-3">
        <label class="form-label">Учреждение</label>
        <InputSelect class="form-select" @bind-Value="Model.InstitutionId">
            <option value="0">Не выбрано</option>
            @foreach (var institution in Institutions)
            {
                <option value="@institution.Id">@institution.Name</option>
            }
        </InputSelect>
    </div>

    <div class="d-flex gap-2">
        <button type="submit" class="btn btn-primary">@(IsEdit ? "Сохранить" : "Добавить")</button>
        <button type="button" class="btn btn-secondary" @onclick="OnCancel">Отмена</button>
    </div>
</EditForm>

@code {
    [Parameter] public SupportStaff Model { get; set; } = new();
    [Parameter] public bool IsEdit { get; set; }
    [Parameter] public EventCallback OnSubmit { get; set; }
    [Parameter] public EventCallback OnCancel { get; set; }

    private List<MedicalInstitution> Institutions { get; set; } = new();

    protected override async Task OnInitializedAsync()
    {
        var hospitals = await DbContext.Hospitals.Cast<MedicalInstitution>().ToListAsync();
        var clinics = await DbContext.Clinics.Cast<MedicalInstitution>().ToListAsync();
        Institutions = hospitals.Concat(clinics).ToList();
    }

    private Task HandleSubmit()
    {
        return OnSubmit.InvokeAsync();
    }
}