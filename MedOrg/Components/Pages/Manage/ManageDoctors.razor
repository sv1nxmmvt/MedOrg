@page "/manage/doctors"
@using Microsoft.AspNetCore.Authorization
@rendermode InteractiveServer
@using MedOrg.Models.Entities
@using MedOrg.Models.DTOs
@using MedOrg.Services
@inject DoctorService DoctorService

<PageTitle>Управление врачами - MedOrg</PageTitle>

<div class="container-fluid">
    <h3>👨‍⚕️ Управление врачами</h3>
    <p class="text-muted">Добавление, редактирование и удаление врачей</p>

    <div class="mb-3">
        <button class="btn btn-success" @onclick="ShowAddForm">
            ➕ Добавить врача
        </button>
    </div>

    @if (isLoading)
    {
        <div class="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Загрузка...</span>
            </div>
            <p>Загрузка данных...</p>
        </div>
    }
    else if (doctors != null && doctors.Data != null && doctors.Data.Any())
    {
        <div class="table-responsive">
            <table class="table table-striped table-hover">
                <thead class="table-primary">
                    <tr>
                        <th>ID</th>
                        <th>ФИО</th>
                        <th>Специализация</th>
                        <th>Стаж (лет)</th>
                        <th>Степень</th>
                        <th>Звание</th>
                        <th>Учреждение</th>
                        <th>Действия</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var doctor in doctors.Data)
                    {
                        <tr>
                            <td>@doctor.Id</td>
                            <td><strong>@doctor.FullName</strong></td>
                            <td>@doctor.Specialization</td>
                            <td>@doctor.YearsOfExperience</td>
                            <td>
                                @if (!string.IsNullOrEmpty(doctor.Degree))
                                {
                                    <span class="badge bg-info">@doctor.Degree</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>
                                @if (!string.IsNullOrEmpty(doctor.Title))
                                {
                                    <span class="badge bg-secondary">@doctor.Title</span>
                                }
                                else
                                {
                                    <span class="text-muted">-</span>
                                }
                            </td>
                            <td>@doctor.InstitutionName</td>
                            <td>
                                <button class="btn btn-sm btn-warning" @onclick="() => ShowEditForm(doctor.Id)">
                                    ✏️ Изменить
                                </button>
                                <button class="btn btn-sm btn-danger" @onclick="() => ConfirmDelete(doctor.Id, doctor.FullName)">
                                    🗑️ Удалить
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <div class="mt-3">
            <p class="text-muted">Всего врачей: <strong>@doctors.Data.Count</strong></p>
        </div>
    }
    else
    {
        <div class="alert alert-info">
            <h5>ℹ️ Нет данных</h5>
            <p>В системе пока нет врачей. Нажмите "Добавить врача" чтобы создать первую запись.</p>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show mt-3" role="alert">
            <strong>❌ Ошибка:</strong> @errorMessage
            <button type="button" class="btn-close" @onclick="() => errorMessage = string.Empty"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show mt-3" role="alert">
            <strong>✅ Успех:</strong> @successMessage
            <button type="button" class="btn-close" @onclick="() => successMessage = string.Empty"></button>
        </div>
    }
</div>

@if (showFormModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">
                        @(isEditMode ? "✏️ Редактирование врача" : "➕ Добавление врача")
                    </h5>
                    <button type="button" class="btn-close" @onclick="CloseFormModal"></button>
                </div>
                <div class="modal-body">
                    <p class="text-info">
                        <strong>Примечание:</strong> Полная форма редактирования будет реализована позже.
                        Сейчас отображается упрощенная версия.
                    </p>
                    <p>ID: @(currentDoctor?.Id ?? 0)</p>
                    <p>Режим: @(isEditMode ? "Редактирование" : "Добавление")</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseFormModal">
                        Закрыть
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@if (showDeleteModal)
{
    <div class="modal fade show d-block" tabindex="-1" style="background-color: rgba(0,0,0,0.6);">
        <div class="modal-dialog modal-dialog-centered">
            <div class="modal-content">
                <div class="modal-header bg-danger text-white">
                    <h5 class="modal-title">⚠️ Подтверждение удаления</h5>
                    <button type="button" class="btn-close btn-close-white" @onclick="CloseDeleteModal"></button>
                </div>
                <div class="modal-body">
                    <p>Вы уверены, что хотите удалить врача:</p>
                    <p class="text-center"><strong>@doctorToDeleteName</strong></p>
                    <p class="text-danger">
                        <small>Это действие необратимо!</small>
                    </p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CloseDeleteModal">
                        Отмена
                    </button>
                    <button type="button" class="btn btn-danger" @onclick="HandleDelete">
                        Удалить
                    </button>
                </div>
            </div>
        </div>
    </div>
}

<style>
    .loading {
        text-align: center;
        padding: 3rem;
    }

    .table-responsive {
        margin-top: 1rem;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
        border-radius: 0.5rem;
    }

    .modal.show {
        display: block;
    }
</style>

@code {
    private QueryResult<List<DoctorDto>>? doctors;
    private Doctor? currentDoctor;
    private int doctorToDeleteId;
    private string doctorToDeleteName = string.Empty;

    private bool isLoading = false;
    private bool showFormModal = false;
    private bool showDeleteModal = false;
    private bool isEditMode = false;

    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadDoctors();
    }

    private async Task LoadDoctors()
    {
        isLoading = true;
        errorMessage = string.Empty;

        try
        {
            doctors = await DoctorService.GetAllAsync();

            if (!doctors.Success)
            {
                errorMessage = doctors.Message ?? "Не удалось загрузить список врачей";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка загрузки: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ShowAddForm()
    {
        currentDoctor = new Doctor();
        isEditMode = false;
        showFormModal = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private async Task ShowEditForm(int id)
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            var result = await DoctorService.GetByIdAsync(id);

            if (result.Success && result.Data != null)
            {
                currentDoctor = result.Data;
                isEditMode = true;
                showFormModal = true;
            }
            else
            {
                errorMessage = result.Message ?? "Врач не найден";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка загрузки: {ex.Message}";
        }
    }

    private void ConfirmDelete(int id, string fullName)
    {
        doctorToDeleteId = id;
        doctorToDeleteName = fullName;
        showDeleteModal = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;
    }

    private async Task HandleDelete()
    {
        try
        {
            var result = await DoctorService.DeleteAsync(doctorToDeleteId);

            showDeleteModal = false;

            if (result.Success)
            {
                successMessage = result.Message ?? "Врач успешно удален";
                await LoadDoctors();
            }
            else
            {
                errorMessage = result.Message ?? "Не удалось удалить врача";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Ошибка удаления: {ex.Message}";
            showDeleteModal = false;
        }
    }

    private void CloseFormModal()
    {
        showFormModal = false;
        currentDoctor = null;
    }

    private void CloseDeleteModal()
    {
        showDeleteModal = false;
        doctorToDeleteId = 0;
        doctorToDeleteName = string.Empty;
    }
}