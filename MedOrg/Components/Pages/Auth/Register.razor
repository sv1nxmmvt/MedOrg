@page "/register"
@rendermode InteractiveServer
@using MedOrg.Data.Models.DTOs.Auth
@using MedOrg.Data.Models.Entities.Auth
@using MedOrg.Models.DTOs
@using MedOrg.Models.DTOs.Auth
@using MedOrg.Models.Entities
@using MedOrg.Models.Entities.Auth
@using MedOrg.Services
@using MedOrg.Services.Auth
@inject AuthService AuthService
@inject NavigationManager NavigationManager

<PageTitle>Регистрация - MedOrg</PageTitle>

<div class="register-container">
    <div class="register-card">
        <div class="register-header">
            <h2>🏥 Регистрация</h2>
            <p>Создайте аккаунт в системе MedOrg</p>
        </div>

        <EditForm Model="@registerModel" OnValidSubmit="@HandleRegister" FormName="RegisterForm">
            <DataAnnotationsValidator />

            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <div class="alert alert-danger" role="alert">
                    @errorMessage
                </div>
            }

            @if (!string.IsNullOrEmpty(successMessage))
            {
                <div class="alert alert-success" role="alert">
                    @successMessage
                </div>
            }

            <div class="mb-3">
                <label class="form-label">Логин *</label>
                <InputText class="form-control" @bind-Value="registerModel.Username" placeholder="Придумайте логин" />
                <ValidationMessage For="@(() => registerModel.Username)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Email *</label>
                <InputText type="email" class="form-control" @bind-Value="registerModel.Email" placeholder="your@email.com" />
                <ValidationMessage For="@(() => registerModel.Email)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Пароль *</label>
                <InputText type="password" class="form-control" @bind-Value="registerModel.Password" placeholder="Минимум 6 символов" />
                <ValidationMessage For="@(() => registerModel.Password)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Подтверждение пароля *</label>
                <InputText type="password" class="form-control" @bind-Value="registerModel.ConfirmPassword" placeholder="Повторите пароль" />
                <ValidationMessage For="@(() => registerModel.ConfirmPassword)" />
            </div>

            <div class="mb-3">
                <label class="form-label">Роль *</label>
                <InputSelect class="form-select" @bind-Value="registerModel.RoleName">
                    <option value="">-- Выберите роль --</option>
                    <option value="@RoleNames.Patient">Пациент</option>
                    <option value="@RoleNames.MedicalStaff">Медицинский работник</option>
                    <option value="@RoleNames.Admin">Администратор</option>
                </InputSelect>
                <ValidationMessage For="@(() => registerModel.RoleName)" />
                <small class="form-text text-muted">
                    Пациент - просмотр своих данных | Медработник - доступ к запросам | Администратор - полный доступ
                </small>
            </div>

            <button type="submit" class="btn btn-primary w-100" disabled="@isLoading">
                @if (isLoading)
                {
                    <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                    <span>Регистрация...</span>
                }
                else
                {
                    <span>Зарегистрироваться</span>
                }
            </button>
        </EditForm>

        <div class="register-footer">
            <p>Уже есть аккаунт? <a href="/login">Войти</a></p>
        </div>
    </div>
</div>

<style>
    .register-container {
        min-height: 100vh;
        display: flex;
        align-items: center;
        justify-content: center;
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        padding: 20px;
    }

    .register-card {
        background: white;
        border-radius: 12px;
        box-shadow: 0 10px 40px rgba(0, 0, 0, 0.2);
        width: 100%;
        max-width: 500px;
        padding: 40px;
    }

    .register-header {
        text-align: center;
        margin-bottom: 30px;
    }

        .register-header h2 {
            color: #2c3e50;
            font-size: 2rem;
            margin-bottom: 10px;
            font-weight: 700;
        }

        .register-header p {
            color: #6c757d;
            font-size: 0.95rem;
            margin: 0;
        }

    .form-label {
        font-weight: 500;
        color: #495057;
        margin-bottom: 8px;
    }

    .form-control, .form-select {
        border-radius: 8px;
        border: 1px solid #ced4da;
        padding: 12px 16px;
        font-size: 1rem;
    }

        .form-control:focus, .form-select:focus {
            border-color: #11998e;
            box-shadow: 0 0 0 0.2rem rgba(17, 153, 142, 0.25);
        }

    .btn-primary {
        background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
        border: none;
        border-radius: 8px;
        padding: 12px;
        font-size: 1rem;
        font-weight: 600;
        margin-top: 10px;
        transition: transform 0.2s;
    }

        .btn-primary:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 5px 15px rgba(17, 153, 142, 0.4);
        }

        .btn-primary:disabled {
            opacity: 0.7;
            cursor: not-allowed;
        }

    .register-footer {
        text-align: center;
        margin-top: 25px;
        padding-top: 25px;
        border-top: 1px solid #e9ecef;
    }

        .register-footer p {
            color: #6c757d;
            margin: 0;
        }

        .register-footer a {
            color: #11998e;
            text-decoration: none;
            font-weight: 600;
        }

            .register-footer a:hover {
                text-decoration: underline;
            }

    .validation-message {
        color: #dc3545;
        font-size: 0.875rem;
        margin-top: 5px;
    }

    .alert {
        border-radius: 8px;
        margin-bottom: 20px;
    }

    .form-text {
        font-size: 0.85rem;
        margin-top: 5px;
    }
</style>

@code {
    [SupplyParameterFromForm]
    private RegisterDto registerModel { get; set; } = new RegisterDto();

    private string? errorMessage;
    private string? successMessage;
    private bool isLoading = false;

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;

        try
        {
            var result = await AuthService.RegisterAsync(registerModel);

            if (result.Success)
            {
                successMessage = "Регистрация успешна! Перенаправление на страницу входа...";

                await Task.Delay(1500);

                NavigationManager.NavigateTo("/login");
            }
            else
            {
                errorMessage = result.Message;
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"Произошла ошибка: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }
}